global !p
def math():
	return vim.eval('typst#in_math()') == '1'

def code():
    return vim.eval('typst#in_code()') == '1'

def markup():
    return vim.eval('typst#in_markup()') == '1'

def fix_indent(snip):
    vim.eval('feedkeys("\\<c-f>")')

endglobal

priority 1
snippet template "My template" b
#import "@phyxmeow/preamble:1.0.0": *
#show: preamble.with(
  font: "$1",
  numbering: "1.1.",
)

#align(center)[#text(20pt)[
  *$2*
]#v(0.5cm)]

$0
endsnippet

snippet mk "Inline Math" wA
$${1:${VISUAL}}$`!p
if t[2] and t[2][0] not in ['，','。',',', '.', ':', '?', '-', ' ','\n']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Display Math" wA
$
  ${1:${VISUAL}}
. $ $0
endsnippet

context "math()"
snippet '_?pp' "to the ... power" riA
^($1)$0
endsnippet

context "math()"
snippet __ "subscript" iA
_($1)$0
endsnippet

context "math()"
snippet '([A-Za-w])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([xyz])(\d)' "auto supscript" wrA
`!p snip.rv = match.group(1)`^`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_(`!p snip.rv = match.group(2)`)
endsnippet

context "math()"
snippet '(?<!\\s)inv' "inverse" riA
^(-1)
endsnippet

context "math()"
snippet sq "square root" iA
sqrt(${1:${VISUAL}})$0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet xx "cross" iA
times 
endsnippet

context "math()"
snippet ** "cdot" iA
dot.c 
endsnippet

context "math()"
snippet '(?<!,)\.\.\.' "cdots" riA
dots.c 
endsnippet

priority 100
context "math()"
snippet dual "dual space" iA
^*
endsnippet

context "math()"
snippet '([a-zA-Z]+)bar' "bar" riA
bar(`!p snip.rv=match.group(1)`)
endsnippet

context "math()"
snippet '(?<=[a-zA-Z])\*\*' "cdot" riA
 dot.c 
endsnippet

priority 200
context "math()"
snippet *dual "double dual space" iA
{**}
endsnippet

# vim:ft=snippets
