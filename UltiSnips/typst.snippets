global !p
def math():
	return vim.eval('typst#in_math()') == '1'

def code():
    return vim.eval('typst#in_code()') == '1'

def markup():
    return vim.eval('typst#in_markup()') == '1'

def fix_indent(snip):
    vim.eval('feedkeys("\<c-f>")')

endglobal

snippet template "My template" b
#import "@phyxmeow/preamble:0.1.0": *
#show: preamble.with(
  font: "$1",
  numbering: "1.1.",
)

#align(center)[#text(20pt)[
  *$2*
]#v(0.5cm)]

$0
endsnippet

snippet mk "Inline Math" wA
$${1:${VISUAL}}$`!p
if t[2] and t[2][0] not in ['，','。',',', '.', ':', '?', '-', ' ','\n']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Display Math" wA
$
  ${1:${VISUAL}}
$ $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet '_?pp' "to the ... power" riA
^($1)$0
endsnippet

context "math()"
snippet __ "subscript" iA
_($1)$0
endsnippet

context "math()"
snippet '(?<!\\s)inv' "inverse" riA
^(-1)
endsnippet
